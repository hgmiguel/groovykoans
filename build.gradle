/*
 * Copyright (c) 2012-2014 nadavc <https://twitter.com/nadavc>
 * This work is free. You can redistribute it and/or modify it under the
 * terms of the WTFPL, Version 2, as published by Sam Hocevar.
 * See the COPYING file for more details.
 */

import java.awt.*
import java.util.List

apply plugin: 'groovy'
apply from: 'gradle/idea.gradle'
apply from: 'gradle/eclipse.gradle'

version = '0.5'

repositories {
    jcenter()
}

configurations {
    gmetrics
    group = 'Reporting'
}

dependencies {
    def groovyComponents = ['groovy', 'groovy-ant', 'groovy-sql', 'groovy-test']
    testCompile groovyComponents.collect { "org.codehaus.groovy:$it:2.4.3" }
    testCompile 'com.h2database:h2:1.3.168'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'

    gmetrics 'org.gmetrics:GMetrics:0.7'
}

task removeSolutions {
    description = 'Removes the solutions from all Koans, so you can start fresh!'

    doLast {
        def solutionsRemoved = 0
        def solutionRegex = $/(?sm)(// -{12} START EDITING HERE -{22})(.*?)(\s+// -{12} STOP EDITING HERE  -{22})/$
        sourceSets.test.allSource.files.each { File sourceFile ->
            solutionsRemoved += (sourceFile.text =~ solutionRegex).count
            sourceFile.text = sourceFile.text.replaceAll(solutionRegex, '$1\n\n$3')
        }
        println "Removed $solutionsRemoved solutions from Koans. Good luck!"
    }
}

// Adapted from http://www.practicalgradle.org/blog/2011/01/convenient-test-execution-with-camel-case-support/
tasks.addRule('Pattern: koan<Number>: Runs a single Koan') { String taskName ->
    if (taskName.startsWith('koan') && taskName.length() > 5) {
        // create a dummy task for the task name specified on the command line
        def dummyTask = task(taskName)
        def koanName = taskName[0].toUpperCase() + taskName[1..-1]

        // make all Test tasks a dependency of the dummy task and reset the includes
        tasks.withType(Test) { testTask ->
            logger.info("Single Koan Execution: apply include pattern to Test task <$testTask.name>")
            testTask.includes = WrapUtil.toSet("**/${koanName}.class")
            dummyTask.dependsOn testTask,gmetrics
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}

// show welcome message
task sayHello << {
    List<String> lines = file('gradle/one-liners.txt').readLines()
    def quote = lines.get(new Random().nextInt(lines.size() - 1))
    println "Groovy Koans ${version}:\n${quote}"
    println "${'-' * quote.size()}\n"
}

test.dependsOn sayHello

// launch browser if test failed. otherwise show that koan is complete
gradle.taskGraph.afterTask { task, taskState ->
    if (task.name != 'test')
        return

    if (taskState.failure) {
        String testRepDir = project.testReportDir
        Desktop.desktop.browse(new File(testRepDir, 'index.html').toURI())
    } else {
        println "Koan is complete. Well done!"
    }
}

// since we're running in quiet logging, show the user what tests are running
tasks.withType(Test) { testTask ->
    testTask.beforeTest { descriptor ->
        print "Running exercises in $descriptor.name()".padRight(60, '.')
    }
    testTask.afterTest { descriptor, result ->
        println result.resultType
    }
}

task gmetrics << {
    //use GMetrics ant task - http://gmetrics.sourceforge.net/gmetrics-ant-task.html
    ant.taskdef(name: 'gmetrics', classname: 'org.gmetrics.ant.GMetricsTask', classpath: configurations.gmetrics.asPath)

    logging.captureStandardOutput(LogLevel.INFO);

    //ensure reporting directory created
    ant.mkdir(dir: "${project.reporting.baseDir.path}/gmetrics")
    ant.mkdir(dir: "src/test/resources/gmetrics")
    ant.gmetrics() {
        report(type: 'org.gmetrics.report.BasicHtmlReportWriter') {
            option(name: 'outputFile', value: "${project.reporting.baseDir.path}/gmetrics/gmetrics.html")
            option(name: 'functions', value: "MethodLineCount=total;CyclomaticComplexity=total")
            option(name: 'reportLevels', value: "method")
            option(name: 'metrics', value: "MethodLineCount,CyclomaticComplexity")
        }
        report(type: 'org.gmetrics.report.XmlReportWriter') {
            option(name: 'outputFile', value: "src/test/resources/gmetrics/gmetrics.xml")
            option(name: 'functions', value: "MethodLineCount=total;CyclomaticComplexity=total")
            option(name: 'levels', value: "MethodLineCount=method;CyclomaticComplexity=method")
        }
        fileset(dir: 'src') {
            include(name: '**/*.groovy')
            //exclusions to filter out any classes with inner classes - sonar doesn't support
            exclude(name: '**/*Config*')
        }
    }
}
